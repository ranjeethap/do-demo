name: CI/CD to DOKS (DOCR â†’ Dev)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

env:
  IMAGE: registry.digitalocean.com/${{ secrets.DOCR_REGISTRY }}/${{ secrets.DOCR_REPO }}

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.settag.outputs.sha }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN }}

      - name: Verify DigitalOcean account & registry
        run: |
          set -euo pipefail
          echo "IMAGE=${IMAGE}"
          echo "=== doctl account get ==="
          doctl account get
          echo "=== doctl registry get ==="
          doctl registry get

      - name: Login to DOCR and verify docker auth
        run: |
          set -euo pipefail
          doctl registry login
          echo "=== ~/.docker/config.json (redacted) ==="
          # show only the keys present; avoid printing any token
          jq '.auths | keys' ~/.docker/config.json || cat ~/.docker/config.json
          grep -q "registry.digitalocean.com" ~/.docker/config.json || { echo "DOCR login missing in docker config"; exit 1; }

      - name: Build & push (app/Dockerfile)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./app/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE }}:${{ github.sha }}
            ${{ env.IMAGE }}:latest

      - name: Set outputs
        id: settag
        run: echo "sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT

  deploy_dev:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN }}

      - name: Kubeconfig (connect to DOKS)
        run: doctl kubernetes cluster kubeconfig save "${{ secrets.DO_CLUSTER }}"

      - name: Roll dev to new image (image-only)
        env:
          IMAGE: registry.digitalocean.com/${{ secrets.DOCR_REGISTRY }}/${{ secrets.DOCR_REPO }}
          TAG:   ${{ needs.build_and_push.outputs.image_tag }}
        run: |
          set -euo pipefail
          kubectl -n dev set image deployment/doks-flask app="${IMAGE}:${TAG}"
          kubectl -n dev set env   deployment/doks-flask APP_VERSION- || true
          kubectl -n dev rollout status deployment/doks-flask --timeout=300s
