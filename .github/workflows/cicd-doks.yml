name: CI/CD to DOKS (DOCR â†’ Dev)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

env:
  IMAGE: registry.digitalocean.com/${{ secrets.DOCR_REGISTRY }}/${{ secrets.DOCR_REPO }}

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.tag.outputs.sha }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Sanity check secrets and IMAGE
        run: |
          set -euo pipefail
          [[ -n "${{ secrets.DO_TOKEN }}" ]] || { echo "DO_TOKEN is empty"; exit 1; }
          [[ -n "${{ secrets.DOCR_REGISTRY }}" ]] || { echo "DOCR_REGISTRY is empty"; exit 1; }
          [[ -n "${{ secrets.DOCR_REPO }}"     ]] || { echo "DOCR_REPO is empty"; exit 1; }
          echo "IMAGE=${IMAGE}"
          if ! [[ "${IMAGE}" =~ ^registry\.digitalocean\.com/[a-z0-9-]+/[a-z0-9-]+$ ]]; then
            echo "IMAGE path malformed: ${IMAGE}"; exit 1;
          fi

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN }}

      - name: Verify DO account & registry
        run: |
          set -euo pipefail
          echo "=== doctl account get ==="
          doctl account get
          echo "=== doctl registry get ==="
          doctl registry get

      - name: Force Docker to use DOCR credentials
        run: |
          set -euo pipefail
          # Write Docker auth directly from doctl
          doctl registry docker-config | tee "$HOME/.docker/config.json" > /dev/null
          echo "=== Docker auth entries ==="
          jq '.auths | keys' "$HOME/.docker/config.json"
          grep -q "registry.digitalocean.com" "$HOME/.docker/config.json" \
            || { echo "No DOCR creds in docker config"; exit 1; }

      - name: Build & push (app/Dockerfile)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./app/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE }}:${{ github.sha }}
            ${{ env.IMAGE }}:latest

      - name: Expose tag
        id: tag
        run: echo "sha=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

  deploy_dev:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN }}

      - name: Kubeconfig (DOKS)
        run: doctl kubernetes cluster kubeconfig save "${{ secrets.DO_CLUSTER }}"

      - name: Roll dev to new image
        env:
          IMAGE: registry.digitalocean.com/${{ secrets.DOCR_REGISTRY }}/${{ secrets.DOCR_REPO }}
          TAG:   ${{ needs.build_and_push.outputs.image_tag }}
        run: |
          set -euo pipefail
          kubectl -n dev set image deployment/doks-flask app="${IMAGE}:${TAG}"
          # make sure no leftover APP_VERSION env overrides mask your app text
          kubectl -n dev set env deployment/doks-flask APP_VERSION- || true
          kubectl -n dev rollout status deployment/doks-flask --timeout=300s
