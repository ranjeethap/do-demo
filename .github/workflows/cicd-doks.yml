name: CI/CD to DOKS via DOCR (no-doctl)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

env:
  IMAGE_REGISTRY: registry.digitalocean.com
  NS: dev

jobs:
  build_push_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Docker auth for DOCR (no DO API calls) ---
      - name: Write Docker config (DOCR)
        run: |
          mkdir -p "$HOME/.docker"
          echo '${{ secrets.DOCKER_CONFIG_JSON }}' > "$HOME/.docker/config.json"
          # quick sanity: must have auths.registry.digitalocean.com
          jq -e '.auths["registry.digitalocean.com"]' "$HOME/.docker/config.json" >/dev/null

      # --- Build & Push the image to DOCR ---
      - name: Compute image name
        id: img
        run: |
          : "${{ secrets.DOCR_REGISTRY }}" "${{ secrets.DOCR_REPO }}"
          IMAGE="${{ env.IMAGE_REGISTRY }}/${{ secrets.DOCR_REGISTRY }}/${{ secrets.DOCR_REPO }}"
          echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"
          echo "tag_sha=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          # Optional friendly tag (date)
          echo "tag_friendly=release-$(date -u +%Y%m%d-%H%M)" >> "$GITHUB_OUTPUT"

      - name: Build image
        run: |
          docker build \
            -f Dockerfile \
            -t "${{ steps.img.outputs.image }}:${{ steps.img.outputs.tag_sha }}" \
            -t "${{ steps.img.outputs.image }}:latest" \
            .

      - name: Push image
        run: |
          docker push "${{ steps.img.outputs.image }}:${{ steps.img.outputs.tag_sha }}"
          docker push "${{ steps.img.outputs.image }}:latest"

      # --- Kubeconfig from secret (no-doctl) ---
      - name: Write kubeconfig
        run: |
          mkdir -p "$HOME/.kube"
          echo "${{ secrets.KUBECONFIG_B64 }}" | base64 -d > "$HOME/.kube/config"
          # show current context (redacted)
          kubectl config current-context || true

      # --- Deploy to DEV (apply manifests that reference :latest or ${GITHUB_SHA}) ---
      - name: Render minimal manifests (dev)
        run: |
          IMAGE="${{ steps.img.outputs.image }}"
          cat > rendered-dev-deploy.yaml <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: doks-flask
  namespace: ${env:NS}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: doks-flask
  template:
    metadata:
      labels:
        app: doks-flask
    spec:
      imagePullSecrets:
      - name: do-docr-secret
      containers:
      - name: app
        image: ${IMAGE}:${{ steps.img.outputs.tag_sha }}
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet: { path: /healthz, port: 8080 }
          initialDelaySeconds: 3
          periodSeconds: 5
        livenessProbe:
          httpGet: { path: /healthz, port: 8080 }
          initialDelaySeconds: 10
          periodSeconds: 10
EOF

          cat > rendered-dev-svc.yaml <<EOF
apiVersion: v1
kind: Service
metadata:
  name: doks-flask
  namespace: ${env:NS}
spec:
  selector:
    app: doks-flask
  ports:
  - port: 80
    targetPort: 8080
EOF

      - name: Ensure namespace and DOCR pull secret
        run: |
          kubectl get ns "${{ env.NS }}" >/dev/null 2>&1 || kubectl create ns "${{ env.NS }}"

          # If you want to create the pull secret in CI without DO API calls,
          # you can copy the Docker config into a k8s secret:
          kubectl -n "${{ env.NS }}" delete secret do-docr-secret >/dev/null 2>&1 || true
          kubectl -n "${{ env.NS }}" create secret generic do-docr-secret \
            --type=kubernetes.io/dockerconfigjson \
            --from-file=.dockerconfigjson="$HOME/.docker/config.json"

          # Optional: make default SA use it
          kubectl -n "${{ env.NS }}" patch serviceaccount default \
            -p '{"imagePullSecrets":[{"name":"do-docr-secret"}]}' || true

      - name: Apply DEV manifests
        run: |
          kubectl apply -f rendered-dev-deploy.yaml
          kubectl apply -f rendered-dev-svc.yaml
          kubectl rollout status -n "${{ env.NS }}" deploy/doks-flask --timeout=300s

      # --- (Optional) Stamp APP_VERSION env to friendly tag ---
      - name: Stamp friendly APP_VERSION (optional)
        run: |
          kubectl -n "${{ env.NS }}" set env deploy/doks-flask APP_VERSION="${{ steps.img.outputs.tag_friendly }}" || true

      - name: Show running image
        run: |
          kubectl -n "${{ env.NS }}" get pods -l app=doks-flask \
            -o jsonpath='{range .items[*]}{.metadata.name}{" -> "}{.spec.containers[0].image}{"\n"}{end}'
